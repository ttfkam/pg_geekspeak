--
--  Test geekspeak extension
--
CREATE EXTENSION geekspeak;  -- fail, needs btree_gist, isn, multicorn, pgcrypto, and plpgsql
ERROR:  required extension "btree_gist" is not installed
HINT:  Use CREATE EXTENSION ... CASCADE to install required extensions too.
CREATE EXTENSION geekspeak CASCADE;
NOTICE:  installing required extension "btree_gist"
NOTICE:  installing required extension "isn"
NOTICE:  installing required extension "multicorn"
NOTICE:  installing required extension "pgcrypto"
--
-- Register a user with the system
--
SELECT register('test@example.com', '10.11.12.13', 'Test Agent');
 register 
----------
 
(1 row)

--
-- Faulty confirmation: wrong nonce
--
SELECT person, nonce IS NOT NULL
  FROM confirm(gen_random_uuid(), 'TestPassword1$', '10.11.12.13');
 person | ?column? 
--------+----------
(0 rows)

--
-- Faulty confirmation: wrong IP
--
WITH cte AS (SELECT nonce FROM sessions WHERE for_reset = true LIMIT 1)
SELECT c.person, c.nonce IS NOT NULL
  FROM cte, confirm(cte.nonce, 'TestPassword1$', '10.11.12.14') AS c;
 person | ?column? 
--------+----------
(0 rows)

--
-- Confirm account
--
WITH cte AS (SELECT nonce FROM sessions WHERE for_reset = true LIMIT 1)
SELECT c.person, c.nonce IS NOT NULL
  FROM cte, confirm(cte.nonce, 'TestPassword1$', '10.11.12.13') AS c;
                                     person                                      | ?column? 
---------------------------------------------------------------------------------+----------
 {"bio": null, "name": "test", "email": "test@example.com", "description": null} | t
(1 row)

--
-- Verify only active logins
--
-- Unconfirmed sessions
SELECT count(*) FROM sessions WHERE for_reset = true;
 count 
-------
     0
(1 row)

-- Expired sessions
SELECT count(*) FROM sessions WHERE expires < now();
 count 
-------
     0
(1 row)

-- Active sessions
SELECT count(*) FROM sessions WHERE for_reset = false AND expires >= now();
 count 
-------
     1
(1 row)

--
-- Bad login: wrong password
--
SELECT login('test@example.com', 'WrongPassword0$', '10.1.2.3', 'Test Agent') IS NOT NULL;
 ?column? 
----------
 f
(1 row)

--
-- Successful login
--
SELECT login('test@example.com', 'TestPassword1$', '10.1.2.3', 'Test Agent') IS NOT NULL;
 ?column? 
----------
 t
(1 row)

--
-- Logout
--
SELECT logout(nonce, '10.2.4.6')
  FROM sessions WHERE for_reset = false AND expires > now();
 logout 
--------
 
(1 row)

--
-- Verify active logins
--
-- Unconfirmed sessions
SELECT count(*) FROM sessions WHERE for_reset = true;
 count 
-------
     0
(1 row)

-- Expired sessions
SELECT count(*) FROM sessions WHERE expires < now();
 count 
-------
     1
(1 row)

-- Active sessions
SELECT count(*) FROM sessions WHERE for_reset = false AND expires >= now();
 count 
-------
     0
(1 row)

--
-- Log back in
--
SELECT login('test@example.com', 'TestPassword1$', '10.1.2.3', 'Test Agent') IS NOT NULL;
 ?column? 
----------
 t
(1 row)

--
-- Add news items
--
SELECT add_headline_bit(
'{
   "source": "Test Framework",
   "url": "https://www.example.com/article/test?id=12345",
   "canonical": "https://www.example.com/a12345",
   "title": "Article 12345",
   "description": "Article 12345 is a test for basic extension functionality.",
   "keywords": "testing,article,extension",
   "og_type": "article",
   "og_locale": "en-US",
   "shortcut_icon": "/favicon.png"
 }'::json,
 (SELECT max(id) FROM people));
 add_headline_bit 
------------------
                1
(1 row)

SELECT add_headline_bit(
'{
   "source": "Test Framework",
   "url": "https://www.example.com/article/test?id=54321",
   "canonical": "https://www.example.com/a54321",
   "title": "Article 54321",
   "description": "Article 54321 is a followup test for basic extension functionality.",
   "keywords": "testing,article,extension",
   "og_type": "article",
   "og_locale": "en-US",
   "shortcut_icon": "/favicon.png"
 }'::json,
 (SELECT nonce FROM sessions WHERE expires > now() LIMIT 1));
 add_headline_bit 
------------------
                2
(1 row)

--
-- Utility functions used by clients
--
SELECT http('2016-04-01 16:20'::timestamptz AT TIME ZONE 'US/Pacific');
           http            
---------------------------
 Fri, 01 Apr 2016 16:20:00
(1 row)

SELECT http('Fri, 01 Apr 2016 16:20:00');
             http             
------------------------------
 Fri Apr 01 16:20:00 2016 PDT
(1 row)

--
-- Utility functions used internally
--
SELECT add_ip('{"127.0.0.1", "127.0.0.2", "127.0.0.3"}'::inet[], '127.0.0.1'::inet);
                  add_ip                   
-------------------------------------------
 {127.0.0.1,127.0.0.2,127.0.0.3,127.0.0.1}
(1 row)

SELECT add_ip('{"127.0.0.1", "127.0.0.2", "127.0.0.3"}'::inet[], '127.0.0.3'::inet);
             add_ip              
---------------------------------
 {127.0.0.1,127.0.0.2,127.0.0.3}
(1 row)

SELECT add_ip('{"127.0.0.1", "127.0.0.2", "127.0.0.3"}'::inet[], '127.0.0.4'::inet);
                  add_ip                   
-------------------------------------------
 {127.0.0.1,127.0.0.2,127.0.0.3,127.0.0.4}
(1 row)

SELECT episode_num(16, 12);
 episode_num 
-------------
        8204
(1 row)

SELECT text(episode_num(16, 12));
  text  
--------
 s16e12
(1 row)

SELECT text(8204::episode_num);
  text  
--------
 s16e12
(1 row)

SELECT mime_type('png'), mime_type('jpg'), mime_type('svgz'), mime_type('mp3');
 mime_type | mime_type  |   mime_type   | mime_type  
-----------+------------+---------------+------------
 image/png | image/jpeg | image/xml+svg | audio/mpeg
(1 row)

SELECT * FROM record(8204::episode_num);
 season | episode 
--------+---------
     16 |      12
(1 row)

SELECT reify_url(true, '//www.example.com/test/');
           reify_url           
-------------------------------
 https://www.example.com/test/
(1 row)

SELECT reify_url(false, '//www.example.com/test/');
          reify_url           
------------------------------
 http://www.example.com/test/
(1 row)

SELECT source('New York Times', 'https://www.nytimes.com/articles/testing');
     source     
----------------
 New York Times
(1 row)

SELECT source(NULL::text, 'https://www.nytimes.com/articles/testing');
   source    
-------------
 nytimes.com
(1 row)

SELECT source(NULL::text, NULL::text);
 source 
--------
 
(1 row)

SELECT validate_password('password'), validate_password('PASSWORD'), validate_password('pAsSwOrD'),
       validate_password('passwd'), validate_password('Password9'), validate_password('pA$$w0rd');
 validate_password | validate_password | validate_password | validate_password | validate_password | validate_password 
-------------------+-------------------+-------------------+-------------------+-------------------+-------------------
 f                 | f                 | f                 | f                 | f                 | t
(1 row)

